/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.simplus.hunter

import com.beckettit.Env
import com.beckettit.transform.*
import com.beckettit.process.Util
import com.beckettit.salesforce.*
import com.beckettit.salesforce.soap.*
import com.beckettit.jdbc.*
import org.apache.log4j.Logger
import org.apache.commons.csv.CSVFormat
import org.apache.commons.csv.CSVParser


class GetPicklistTransformations {
    JdbcClient jdbc
    SOAPClient soap

    public GetPicklistTransformations(){
        String.metaClass.getNotBlank = { !delegate.allWhitespace }

        Env.init()
        jdbc = new JdbcClient()
        jdbc.initProfile(Env.getJdbcProfile())

        soap = new SOAPClient(jdbc)
        soap.initProfile(Env.getSoapProfile())
        soap.authenticate()

        jdbc.execute """
        DROP TABLE IF EXISTS hunter_sfdc.picklist_mapping_data
        """

        jdbc.execute """
        CREATE TABLE hunter_sfdc.picklist_mapping_data(
        	source_system varchar(25) not null, 
        	source_field varchar(255) null, 
        	field_value varchar(255) null, 
        	record_count integer null,
        	matched boolean null default false
        )
        """

        jdbc.execute """
        DROP TABLE IF EXISTS hunter_sfdc.picklist_mappings
        """

        jdbc.execute """
        CREATE TABLE hunter_sfdc.picklist_mappings(
        	sugar_table varchar(50) not null, 
        	sugar_field varchar(255) not null, 
        	salesforce_object varchar(255) not null, 
        	salesforce_field varchar(255) not null,
            vlookup_type varchar(255) not null
        )
        """

		def sugarValuesMap = [:]
		def sfdcValuesMap = [:]

		def picklistMappingsInserts = []
		File mapped_fieldsFile = 
			new File(Env.class.getClassLoader().getResource("mapped_fields.csv").getFile())
        CSVFormat csv = CSVFormat.DEFAULT.withHeader()
        CSVParser parser = csv.parse(new FileReader(mapped_fieldsFile))
        parser.records.eachWithIndex { record, i ->
            String sugarTable = record.get("Sugar Table")
            String sugarField = record.get("Sugar Field")
            String sfdcObject = record.get("Salesforce Object")
            String sfdcField = record.get("Salesforce Field")
            String vlookupType = record.get("Vlookup Type")

            //for now
            //if(vlookupType == null || "".equals(vlookupType)) return
            picklistMappingsInserts << [sugarTable, sugarField, sfdcObject, sfdcField, vlookupType]

            String mapKey = sugarTable + "." + sugarField
            String join = ""
            String where = ""
            if(sugarTable.endsWith("_cstm")){
                String joinTable = sugarTable.substring(0,sugarTable.length()-5)
                join = "INNER JOIN ${joinTable} ON ${joinTable}.id=${sugarTable}.id_c AND ${joinTable}.deleted = 0"
            }else{
                where = "AND deleted = 0"
            }
            sugarValuesMap[mapKey] = [:]
            String query = """
            SELECT ${sugarField} f, count(*) c
            FROM ${sugarTable}
            ${join}
            WHERE ${sugarField} IS NOT NULL AND ${sugarField} <> ''
            ${where}
            GROUP BY ${sugarField}
            ORDER BY c DESC
            """
            jdbc.eachRow(query) { row ->
                sugarValuesMap[mapKey][row.f] = row.c
            }
			
            //get salesforce fields picklist values
			def desc = soap.getDescribeSObject(sfdcObject)
			def fieldDefs = desc.fields.findAll{ it.name == sfdcField }
			def fieldDef = fieldDefs?.size() > 0 ? fieldDefs[0] : null
			String sfdcMapKey = sfdcObject + "." + sfdcField
			if(fieldDef != null && fieldDef.picklistValues != null) {
				sfdcValuesMap[sfdcMapKey] = []
				fieldDef.picklistValues.each {
					sfdcValuesMap[sfdcMapKey] << it.value.trim()
				}
			}
        }

        jdbc.executeBatch("INSERT INTO hunter_sfdc.picklist_mappings (sugar_table, sugar_field, salesforce_object, salesforce_field, vlookup_type) VALUES (?,?,?,?,?)", picklistMappingsInserts)

        println "Sugar values...."
        String sugarInsertStmt = "INSERT INTO hunter_sfdc.picklist_mapping_data (source_system, source_field, field_value, record_count) values(?, ?, ?, ?)"
        def sugarInserts = []
        sugarValuesMap.keySet().each { key ->
        	println "${key}..."
        	sugarValuesMap[key].keySet().each { value ->
        		println "${value}:"+sugarValuesMap[key][value]
        		sugarInserts << ['sugar', key.trim(), value.trim(), sugarValuesMap[key][value]]
        	}
        }
        jdbc.executeBatch(sugarInsertStmt, sugarInserts)

        println "Salesforce values...."
        String sfdcInsertStmt = "INSERT INTO hunter_sfdc.picklist_mapping_data (source_system, source_field, field_value) values(?, ?, ?)"
        def sfdcInserts = []
        sfdcValuesMap.keySet().each {
        	println "${it}..."
        	sfdcValuesMap[it].each { value ->
        		println "${value}"
        		sfdcInserts << ['sfdc', it.trim(), value.trim()]
        	}
        }
        jdbc.executeBatch(sfdcInsertStmt, sfdcInserts)

        //Match
        def matchUpdates = []
        String matchQuery = """
        SELECT pm.*, sugar_data.source_field, sugar_data.field_value sugar_value, vlookup.sfdc_type vlookup_value, sfdc_data.field_value sf_value
        FROM hunter_sfdc.picklist_mappings pm
        INNER JOIN hunter_sfdc.picklist_mapping_data sugar_data ON sugar_data.source_system = 'sugar' and sugar_data.source_field = concat(pm.sugar_table,'.',pm.sugar_field)
        LEFT OUTER JOIN hunter_sfdc.picklist_mapping_data sfdc_data ON sfdc_data.source_system = 'sfdc' and sfdc_data.source_field = concat(pm.salesforce_object,'.',pm.salesforce_field) AND sfdc_data.field_value = sugar_data.field_value        
        LEFT OUTER JOIN hunter_sfdc.ref_vlookup vlookup ON vlookup.vlookup_type = pm.vlookup_type AND vlookup.sugar_type = sugar_data.field_value
        """

        jdbc.eachRow(matchQuery) { matchRow ->
        	//if(matchRow.field_value?.notBlank || matchRow.sfdc_type?.notBlank) matchUpdates << [matchRow.source_field, matchRow.field_value]
            if(matchRow.sugar_value?.notBlank && (matchRow.sf_value?.notBlank || matchRow.vlookup_value?.notBlank)) matchUpdates << [matchRow.source_field, matchRow.sugar_value]
        }

        jdbc.executeBatch("update hunter_sfdc.picklist_mapping_data SET matched = TRUE where source_system = 'sugar' and source_field = ? and field_value = ?", matchUpdates)
    }

    static void main(String[] args) {
        println new GetPicklistTransformations()

    }
}
