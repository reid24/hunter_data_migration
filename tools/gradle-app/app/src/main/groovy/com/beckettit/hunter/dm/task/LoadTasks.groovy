/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.beckettit.hunter.dm.task

import com.beckettit.Env
import com.beckettit.transform.*
import com.beckettit.process.Util
import com.beckettit.salesforce.*
import com.beckettit.salesforce.soap.*
import com.beckettit.jdbc.*
import com.beckettit.hunter.dm.obj.*
import org.apache.log4j.Logger

class LoadTasks extends BaseTask {
    Boolean insert = false
    Boolean update = false

    public LoadTasks(String[] args){
        super(args)
        insert = args?.findAll {
            it == '--insert'
        }.size() > 0

        update = args?.findAll {
            it == '--update'
        }.size() > 0
    }

    public void run() {
        if(insert){
            ObjectDef objDef = Task.getInsertObjectDef()
            String query = """
            select * from (
                select ref.id, mig.*, c.id sfdc_whoid from ${objDef.table} mig
                left outer join ref_contact c on c.external_id = mig.WhoId
                left outer join ref_task ref on ref.external_id = mig.External_ID__c
            ) m WHERE m.id IS NULL and m.OwnerId is not null
            """
            println query
            soap.upsertAll("insert-tasks", objDef, query, [batchSize:200])

            query = """
            select * from (
                select ref.id, mig.*, c.id sfdc_whoid from ${objDef.table} mig
                left outer join ref_contact c on c.external_id = mig.WhoId
                left outer join ref_task ref on ref.external_id = mig.External_ID__c
            ) m WHERE m.id IS NULL and m.OwnerId is null
            """
            objDef.mapping.remove("OwnerId")
            soap.upsertAll("insert-tasks-noowner", objDef, query, [batchSize:200])
            Util.backupSaveResults(jdbc, "tsks")
        }       

        if(update){
            ObjectDef objDef = Task.getUpdateObjectDef()
            String query = """
            select * from (
                select ref.id, mig.*, c.id sfdc_whoid from ${objDef.table} mig
                left outer join ref_contact c on c.external_id = mig.WhoId
                left outer join ref_task ref on ref.external_id = mig.External_ID__c
            ) m WHERE m.id IS NOT NULL and m.OwnerId is not null
            """
            println query
            soap.upsertAll("update-tasks", objDef, query, [batchSize:200])

            query = """
            select * from (
                select ref.id, mig.*, c.id sfdc_whoid from ${objDef.table} mig
                left outer join ref_contact c on c.external_id = mig.WhoId
                left outer join ref_task ref on ref.external_id = mig.External_ID__c
            ) m WHERE m.id IS NOT NULL and m.OwnerId is null
            """
            objDef.mapping.remove("OwnerId")
            soap.upsertAll("update-tasks-noowner", objDef, query, [batchSize:200])
            Util.backupSaveResults(jdbc, "tsks_u")
        }       
    }

    //main task
    static void main(String[] args) {
        LoadTasks proc = new LoadTasks(args)
        proc.run()
    }
}
