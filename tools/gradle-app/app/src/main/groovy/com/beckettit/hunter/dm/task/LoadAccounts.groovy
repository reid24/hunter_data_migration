/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.beckettit.hunter.dm.task

import com.beckettit.Env
import com.beckettit.transform.*
import com.beckettit.process.Util
import com.beckettit.salesforce.*
import com.beckettit.salesforce.soap.*
import com.beckettit.jdbc.*
import com.beckettit.hunter.dm.obj.*
import org.apache.log4j.Logger

class LoadAccounts extends BaseTask {
    Boolean insertParents = false
    Boolean updateParents = false
    Boolean insertChildren = false
    Boolean updateChildren = false

    public LoadAccounts(String[] args){
        super(args)
        insertParents = args?.findAll {
            it == '--insert-parents'
        }.size() > 0

        updateParents = args?.findAll {
            it == '--update-parents'
        }.size() > 0
        
        insertChildren = args?.findAll {
            it == '--insert-children'
        }.size() > 0
        
        updateChildren = args?.findAll {
            it == '--update-children'
        }.size() > 0
    }

    public void run() {
        if(insertParents){
            ObjectDef objDef = Account.getInsertParentsObjectDef()
            String query = """
            select * from (
                select ${objDef.getMappedColumnsForQuery('mig')} from mig_account mig
                left outer join ref_account ref on ref.external_id = mig.External_ID__c 
                where ref.id is null and mig.ParentId is null
            ) m
            """
            println query
            //soap.upsertAll("insert-parent-accounts", objDef, query, [batchSize:200])
        }

        if(updateParents){
            ObjectDef objDef = Account.getUpdateParentsObjectDef()
            String query = """
            select * from (
                select ref.id, ${objDef.getMappedColumnsForQuery('mig')} from mig_account mig
                left outer join ref_account ref on ref.external_id = mig.External_ID__c 
                where ref.id is not null and mig.ParentId is null
            ) m
            """
            println query
            //soap.upsertAll("update-parent-accounts", objDef, query, [batchSize:200])
        }

        if(insertChildren){
            ObjectDef objDef = Account.getInsertChildrenObjectDef()
            String query = """
            select * from (
                select mig.* from mig_account mig
                left outer join ref_account ref on ref.external_id = mig.External_ID__c 
                where ref.id is null and mig.ParentId is not null
            ) m
            """
            soap.upsertAll("insert-child-accounts", objDef, query, [batchSize:200])
        }

        if(updateChildren){
            ObjectDef objDef = Account.getUpdateChildrenObjectDef()
            String query = """
            select * from (
                select ref.id, mig.* from mig_account mig
                left outer join ref_account ref on ref.external_id = mig.External_ID__c 
                where ref.id is not null and mig.ParentId is not null
            ) m
            """
            soap.upsertAll("update-child-accounts", objDef, query, [batchSize:200])
        }
    }

    //main task
    static void main(String[] args) {
        LoadAccounts proc = new LoadAccounts(args)
        proc.run()
    }
}
